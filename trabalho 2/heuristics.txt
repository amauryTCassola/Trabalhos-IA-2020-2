CORNER GRAB n precisa perder tempo procurando

utility function: combinação linear das várias heurísticas
		também é possível assign valores estáticos para cada posição no tabuleiro

COIN PARITY: the difference in coins between max and min
	Coin Parity Heuristic Value =
		100* (Max Player Coins –Min Player Coins)/
		(Max Player Coins + Min Player Coins)

MOBILITY: restringir a mobilidade do oponente e maximizar a sua
	-actual mobility: # of moves a player has, given game state
		immediate
		calculated by examining the board + counting the # of legal moves


if((Max Player Actual Mobility Value + Min Player Actual Mobility Value) !=0)
	Actual Mobility Heuristic Value = 
		100* (Max Player Actual Mobility Value –Min Player ActualMobility Value)/
		(Max Player Actual Mobility Value + Min Player Actual Mobility Value)
else
	Actual Mobility Heuristic Value = 0


	-potential mobility: # of moves a player might have over the next few moves
		includes moves currently illegal that may become legal later
		long-term
		looks ahead on its own without the help of searchinf strategies
		Counts the number of empty spaces next to at least one of the opponent's coin
		LOOK UP HOW TO CALCULATE THE POTENTIAL MOBILITY


CORNERS CAPTURED
captured, potential + unlikely

	if((Max Player Corner Value + Min Player Corner Value) !=0)
		Corner Heuristic Value =
			100* (Max Player Corner Heurisitc Value –Min Player Corner Heuristic Value)/
			(Max Player Corner Heuristic Value + Min Player CornerHeurisitc Value)
	else
 		Corner Heuristic Value = 0 

STABILITY
	3 categories: stable, semi-stable, unstable
		stable: cannot be flanked ever (corners are always stable) (W: 1)
		unstable: could be flanked in the very next move (W: -1)
		semi: could potentially be flanked in the future, but not immediately (W: 0)
		soma os pesos pra chegar a um valor de estabilidade do jogador



interessante mudar dinamicamente os pesos das heurísticas
	nos primeiros movimentos, estabilidade e mobilidade são pesadas
	corners e estabilidade vão ficando mais pesados ao que o jogo progride
	quando se é possível buscar na árvore até o final, todo o peso é dado para coin parity



ITERATIVE DEEPENING




https://courses.cs.washington.edu/courses/cse573/04au/Project/mini1/RUSSIA/Final_Paper.pdf
http://web.eecs.utk.edu/~zzhang61/docs/reports/2014.04%20-%20Searching%20Algorithms%20in%20Playing%20Othello.pdf
https://apps.dtic.mil/sti/pdfs/ADA106560.pdf
https://github.com/kartikkukreja/blog-codes/blob/master/src/Heuristic%20Function%20for%20Reversi%20(Othello).cpp
http://pressibus.org/ataxx/autre/minimax/node3.html


necessary conditions for flipping a disc:
	there must be one of the player's discs in one side of the desired disc
	there must be a blank square on the other side (following a straight line)

corner discs are always stable
	if corner then STABLE

edge discs have only one line of instability: the edge itself
	if edge and adjacent to stable (edge or corner) of the same color then STABLE

	if between two opponent's discs on the edge then STABLE

	if no empty squares on the edge then STABLE

internal discs are stable if, in all 4 directions (vertical, horizontal, diag1 and diag2)
	are adjacent to a stable disc of the same color or
	is in a filled row
